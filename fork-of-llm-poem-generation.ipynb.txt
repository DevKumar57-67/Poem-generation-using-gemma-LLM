{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4177116,"sourceType":"datasetVersion","datasetId":2464675},{"sourceId":11371,"sourceType":"modelInstanceVersion","modelInstanceId":5171},{"sourceId":11372,"sourceType":"modelInstanceVersion","modelInstanceId":5388}],"dockerImageVersionId":30673,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-17T19:07:53.938437Z","iopub.execute_input":"2024-04-17T19:07:53.939296Z","iopub.status.idle":"2024-04-17T19:07:55.050992Z","shell.execute_reply.started":"2024-04-17T19:07:53.939263Z","shell.execute_reply":"2024-04-17T19:07:55.049867Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"WELCOME TO THE THIS NEW KAGGLE NOTEBOOK OF MINE ","metadata":{}},{"cell_type":"markdown","source":"PROBLEM STATEMENT: Today I am going to fine tune Gemma LLM AI Model by Google in two sets of datasets train and test dataset first I will take the input from the dataset and the I will generate text related to the input using gemma model ","metadata":{}},{"cell_type":"markdown","source":"USING:\n\n\nGEMMA MODEL:\n\n\nPOEM GENERATION DATASET:\n\n\nKERAS BACKEND:\n\n\nKERAS_NLP:","metadata":{}},{"cell_type":"markdown","source":"ALGORITHM:\n\nIMPORTING OS\n\nSETTING UP OS\n\nIMPORTING KERAS BACKEND\n\nIMPORTING KERAS_NLP\n\nIMPORTING GEMMA LLM \n\nPROMPT ENGINEERING \n\nDATASET LOADING\n\nDATA ANALYTICS \n\nVALUE COUNTS\n\nTAKING INPUTS FROM DATA\n\nTEXT GENERATIONS USING LLM\n\nVECTOR EMBEDDING OF TEXT\n\nGENERATING VECTORS \n\nVISUALISATION \n\n\n\n\n","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"      IMPORTING OS:","metadata":{}},{"cell_type":"code","source":"\n\nimport os\n\nos.environ[\"KERAS BACKEND\"]=\"torch\"\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T19:07:55.052512Z","iopub.execute_input":"2024-04-17T19:07:55.052901Z","iopub.status.idle":"2024-04-17T19:07:55.056944Z","shell.execute_reply.started":"2024-04-17T19:07:55.052875Z","shell.execute_reply":"2024-04-17T19:07:55.05578Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"      IMPORTING KERAS:\n      IMPORTING                 KERAS_NLP:","metadata":{}},{"cell_type":"code","source":"import keras \nimport keras_nlp \n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T19:07:55.058261Z","iopub.execute_input":"2024-04-17T19:07:55.05902Z","iopub.status.idle":"2024-04-17T19:08:10.057331Z","shell.execute_reply.started":"2024-04-17T19:07:55.058972Z","shell.execute_reply":"2024-04-17T19:08:10.055882Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"     LOADING GEMMA LLM      MODEL:","metadata":{}},{"cell_type":"code","source":"#gemma base_model\n\nbase_model=keras_nlp.models.GemmaCausalLM.from_preset(\"gemma_instruct_2b_en\")\nbase_model.generate(\"Hi is that you \", max_length=100)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T19:08:10.060481Z","iopub.execute_input":"2024-04-17T19:08:10.061233Z","iopub.status.idle":"2024-04-17T19:10:29.970152Z","shell.execute_reply.started":"2024-04-17T19:08:10.061203Z","shell.execute_reply":"2024-04-17T19:10:29.968751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#importing libraries \n\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns \n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T19:10:29.971949Z","iopub.execute_input":"2024-04-17T19:10:29.972516Z","iopub.status.idle":"2024-04-17T19:10:30.896122Z","shell.execute_reply.started":"2024-04-17T19:10:29.972476Z","shell.execute_reply":"2024-04-17T19:10:30.895128Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"    PROMPT ENGINEERING: ","metadata":{}},{"cell_type":"code","source":"prompt=\"Give me a song on coding\"\nbase_model.generate(prompt,max_length=200)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T19:10:30.897378Z","iopub.execute_input":"2024-04-17T19:10:30.897747Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"    DATASET LOADING:","metadata":{}},{"cell_type":"code","source":"test=pd.read_csv(\"/kaggle/input/poem-classification-nlp/Poem_classification - test_data.csv\")\ntest.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train=pd.read_csv(\"/kaggle/input/poem-classification-nlp/Poem_classification - train_data.csv\")\ntrain.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n    DATA ANALYTICS:","metadata":{}},{"cell_type":"code","source":"test.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.tail()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.merge(train,test,on='Poem',)\nprint(df)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We have successfully merged our dataset and we got three columns Genre_x, Poem and Genre_y.\n\nNow we will be using Gemma LLM model on the dataset to generate some text.","metadata":{}},{"cell_type":"code","source":"#value_counts \ndf['Genre_x'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Genre_y'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Poem'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"    Poem 1 - \n    Love me stupid love me terrible and I am no mountain but rather a monsoon of imperfect thunder loves me.","metadata":{}},{"cell_type":"code","source":"#generating poem\n\nprint(\"New generated poem\")\nbase_model.generate(\"Love me stupid\", max_length=200)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"    Poem-2 \n    Shaiitake velvet foot hen of woods wooder cloud ear slippery jack brown hreatsof.","metadata":{}},{"cell_type":"code","source":"print(\"Second generated poem\")\nbase_model.generate(\"Shaiitake velevet foot hen of woods\",max_length=200)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}}]}